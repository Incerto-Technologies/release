receivers:
  incerto_postgres:
    collection_interval: 60s
    endpoint: ${env:POSTGRES_ENDPOINT}
    username: ${env:POSTGRES_USERNAME}
    password: ${env:POSTGRES_PASSWORD}
    database: ${env:POSTGRES_DATABASE}
    sslmode: ${env:POSTGRES_SSLMODE} # keep 'require' for RDS and 'disable' for local

    # RDS ->
    # endpoint: incerto-rds-postgres.cdi8uge2cx5f.ap-south-1.rds.amazonaws.com:5432
    # username: postgres
    # password: postgres-incerto
    # database: postgres
    # sslmode: require

    # LOCAL ->
    # endpoint: 0.0.0.0:5432
    # username: postgres
    # password: postgres
    # database: postgres
    # sslmode: disable
    exists:
      - name: pg_stat_statements_activity
        query: "SELECT query, minmax_stats_since FROM pg_stat_statements WHERE minmax_stats_since > NOW() - INTERVAL '30 minutes' and (calls > 5 or max_exec_time > 3000)"

      - name: pg_in_recovery
        query: "select * from (SELECT pg_is_in_recovery()) where pg_is_in_recovery != 'f'"

      - name: wal_archiving_failed 
        query: "select last_failed_time from pg_stat_archiver where now() - interval '10 minutes' <= last_failed_time"

      - name: fpi_ratio_high 
        query: "select * from (SELECT wal_fpi, wal_records, (wal_fpi::numeric / NULLIF(wal_records, 0)) AS fpi_ratio FROM pg_stat_wal) where fpi_ratio > 0.3"

      - name: connection_limit_close 
        query: "select * from (SELECT COUNT(*) AS current_connections, current_setting('max_connections')::int AS max_connections, ROUND((COUNT(*)::numeric / current_setting('max_connections')::numeric) * 100, 2) AS connection_ratio_percentage FROM pg_stat_activity where pg_stat_activity.state = 'active') where connection_ratio_percentage > 70 ;"

    select:
      - name: query_running_long_postgre
        query: "SELECT pid, usename FROM pg_stat_activity WHERE state = 'active' AND now() - query_start > INTERVAL '30 seconds'"

      - name: query_waiting_5s
        query: "select pid from pg_locks where pg_locks.granted = FALSE and (NOW() - pg_locks.waitstart) > interval '5 seconds'"

exporters:

  otlphttp:
    endpoint: ${env:SERVICE_URL}/api/v1/alerts/generated-metrics/${env:HOST_ID}?domain=postgres
    metrics_endpoint: ${env:SERVICE_URL}/api/v1/alerts/generated-metrics/${env:HOST_ID}?domain=postgres
    encoding: json
    compression: none

  debug:
    verbosity: detailed

service:  
  pipelines:
    metrics:
      receivers: [incerto_postgres]
      exporters: [debug, otlphttp]