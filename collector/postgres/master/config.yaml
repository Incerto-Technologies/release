receivers:
  incerto_postgres:
    collection_interval: 60s
    endpoint: ${env:POSTGRES_ENDPOINT}
    username: ${env:POSTGRES_USERNAME}
    password: ${env:POSTGRES_PASSWORD}
    database: postgres
    exists:
      - name: pg_stat_statements_activity
        query: "SELECT query, minmax_stats_since FROM pg_stat_statements WHERE minmax_stats_since > NOW() - INTERVAL '30 minutes' and (calls > 5 or max_exec_time > 3000)"

      - name: pg_in_recovery
        query: "select * from (SELECT pg_is_in_recovery()) where pg_is_in_recovery != 'f'"

      - name: wal_archiving_failed 
        query: "select last_failed_time from pg_stat_archiver where now() - interval '10 minutes' <= last_failed_time"

      - name: fpi_ratio_high 
        query: "SELECT 1 FROM pg_stat_wal WHERE (wal_fpi::numeric / NULLIF(wal_records, 0)) > 0.3"

      - name: autovacuum_disabled
        query: "SELECT 1 FROM pg_settings WHERE name = 'autovacuum' AND setting = 'off'"

      - name: hot_standby_feedback_disabled
        query: "SELECT 1 FROM pg_settings WHERE name = 'hot_standby_feedback' AND setting = 'off' AND EXISTS (SELECT 1 FROM pg_stat_replication)"

      - name: non_ssl_connections
        query: "SELECT 1 FROM pg_stat_ssl WHERE ssl = false LIMIT 1"

      - name: deprecated_tls_version
        query: "SELECT 1 FROM pg_stat_ssl WHERE ssl = true AND version IN ('TLSv1.0','TLSv1.1') LIMIT 1"

      - name: autovacuum_workers_idle
        query: "SELECT 1 FROM pg_settings WHERE name = 'autovacuum' AND setting = 'on' AND NOT EXISTS (SELECT 1 FROM pg_stat_activity WHERE backend_type = 'autovacuum worker' AND state = 'active' AND now() - query_start < INTERVAL '1 hour')"

      - name: track_counts_disabled
        query: "SELECT 1 FROM pg_settings WHERE name = 'track_counts' AND setting = 'off'"

      - name: ssl_disabled
        query: "SELECT 1 FROM pg_settings WHERE name = 'ssl' AND setting = 'off'"
      
      - name: logging_configuration
        query: "SELECT 1 FROM pg_settings WHERE (name = 'log_checkpoints' AND setting = 'off') OR (name = 'log_autovacuum_min_duration' AND setting = '-1')"

      - name: weak_password_encryption
        query: "SELECT 1 FROM pg_settings WHERE name = 'password_encryption' AND setting != 'scram-sha-256'"

      - name: high_connection_usage
        query: "SELECT 1 FROM (SELECT COUNT(*) as active_connections FROM pg_stat_activity) a, (SELECT setting::int as max_connections FROM pg_settings WHERE name = 'max_connections') b WHERE a.active_connections > (b.max_connections * 0.8)"

      - name: connection_pool_exhaustion
        query: "SELECT 1 FROM (SELECT COUNT(*) as active_connections FROM pg_stat_activity) a, (SELECT setting::int as max_connections FROM pg_settings WHERE name = 'max_connections') b WHERE a.active_connections > (b.max_connections * 0.95)"

      - name: buffer_cache_hit_ratio
        query: "SELECT 1 FROM (SELECT ROUND(SUM(blks_hit) * 100.0 / NULLIF(SUM(blks_hit) + SUM(blks_read), 0), 2) AS hit_pct FROM pg_stat_database) WHERE hit_pct < 90"

      - name: temporary_file_usage
        query: "SELECT 1 FROM pg_stat_database WHERE temp_bytes > 0 LIMIT 1"

      - name: idle_in_transaction_sessions
        query: "SELECT 1 FROM pg_stat_activity WHERE state = 'idle in transaction' AND now() - xact_start > INTERVAL '5 minutes' LIMIT 1"

      - name: deadlocks_detected
        query: "SELECT 1 FROM pg_stat_database WHERE deadlocks > 0 LIMIT 1"

      - name: lock_waiters_present
        query: "SELECT 1 FROM pg_locks l JOIN pg_stat_activity a ON l.pid = a.pid WHERE NOT l.granted AND now() - a.query_start > INTERVAL '30 seconds' LIMIT 1"

      - name: pg_stat_statements_missing
        query: "SELECT 1 WHERE NOT EXISTS (SELECT 1 FROM pg_extension WHERE extname = 'pg_stat_statements')"

      - name: long_running_queries
        query: "SELECT 1 FROM pg_stat_activity WHERE state = 'active' AND now() - query_start > INTERVAL '1 minute' LIMIT 1"

      - name: high_sequential_scan_ratio
        query: "SELECT 1 FROM pg_stat_user_tables WHERE (idx_scan > 0) AND ROUND((seq_scan::decimal/(NULLIF(idx_scan,0)+1))*1.0,2) > 10 LIMIT 1"

      - name: unused_indexes
        query: "SELECT 1 FROM pg_stat_user_indexes s JOIN pg_index i ON s.indexrelid = i.indexrelid WHERE s.idx_scan = 0 AND i.indisunique = false AND i.indisprimary = false LIMIT 1"

      - name: idle_in_transaction_count
        query: "SELECT 1 FROM pg_stat_activity WHERE state = 'idle' AND now() - query_start > INTERVAL '5 minutes' LIMIT 1"

      - name: total_deadlocks
        query: "SELECT 1 FROM pg_stat_database WHERE deadlocks > 0 LIMIT 1"

      - name: lock_waiters_count
        query: "SELECT 1 from pg_locks l JOIN pg_stat_activity a ON l.pid = a.pid WHERE NOT granted LIMIT 1"

      - name: vacuum_analyze_timing
        query: "SELECT 1 FROM pg_stat_user_tables WHERE last_autovacuum IS NOT NULL AND last_autoanalyze IS NOT NULL AND last_autovacuum < now() - interval '1 day' LIMIT 1"

      - name: rollback_rate_high
        query: "SELECT 1 FROM (SELECT SUM(xact_rollback)::decimal / NULLIF(SUM(xact_commit), 0) * 100 as rollback_pct FROM pg_stat_database) t WHERE rollback_pct > 10 LIMIT 1"

      - name: frequent_temporary_table_creation
        query: "SELECT 1 FROM (SELECT sum(temp_bytes) as total_temp_bytes FROM pg_stat_database) t WHERE total_temp_bytes > 100 * 1024 * 1024 LIMIT 1"

      - name: transaction_wraparound_risk
        query: "SELECT 1 FROM (WITH max_age AS (SELECT 2000000000 AS max_old_xid, setting::int AS autovacuum_freeze_max_age FROM pg_settings WHERE name = 'autovacuum_freeze_max_age'), per_db AS (SELECT age(datfrozenxid) AS oldest_xid FROM pg_database WHERE datallowconn) SELECT MAX(oldest_xid) AS oldest_xid, ROUND(100.0 * MAX(oldest_xid) / (SELECT max_old_xid FROM max_age), 2) AS pct_wrap FROM per_db) wrap WHERE pct_wrap > 80 LIMIT 1"
      
      - name: table_bloat_dead_tuples
        query: "SELECT 1 FROM pg_stat_user_tables WHERE (n_live_tup + n_dead_tup) > 1000000 AND ROUND(100.0 * n_dead_tup / GREATEST(n_live_tup+n_dead_tup,1), 2) > 20 LIMIT 1"

      - name: column_statistics_staleness
        query: "SELECT 1 FROM pg_stat_user_tables pst JOIN pg_class pc ON pc.relname = pst.relname WHERE pc.reltuples >= 1000000 AND COALESCE(pst.last_analyze, pst.last_autoanalyze) < (now() - INTERVAL '1 day') LIMIT 1"
      
      - name: tables_without_primary_key
        query: "SELECT 1 FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace LEFT JOIN pg_index i ON c.oid = i.indrelid AND i.indisprimary WHERE c.relkind = 'r' AND n.nspname NOT IN ('pg_catalog','information_schema') AND i.indexrelid IS NULL LIMIT 1"

      - name: wal_archiver_errors
        query: "SELECT 1 FROM pg_stat_archiver WHERE failed_count > 0"

      - name: pg_stat_statements_threshold_exceeded
        query: "SELECT 1 FROM (SELECT COUNT(*) as current_count, (current_setting('pg_stat_statements.max')::int * 0.8)::int as threshold_count FROM pg_stat_statements) s WHERE s.current_count >= 0.9*s.threshold_count"

      - name: postgresql_version
        query: "SELECT 1 WHERE current_setting('server_version_num')::integer < 150000"

exporters:

  otlphttp:
    endpoint: ${env:SERVICE_URL}/api/v1/alerts/generated-metrics/01JX28DBA77WDWBC78QYYF92R7?domain=postgres
    metrics_endpoint: ${env:SERVICE_URL}/api/v1/alerts/generated-metrics/01JX28DBA77WDWBC78QYYF92R7?domain=postgres
    encoding: json
    compression: none

  debug:
    verbosity: detailed

service:  
  pipelines:
    metrics:
      receivers: [incerto_postgres]
      exporters: [otlphttp, debug]

# =============================================================================
# COMMENTED OUT CONFIGURATIONS - FOR REFERENCE
# =============================================================================

# TODO (YAGYANSH): Add back when replication is verifyable
# exists:
#   - name: replication_lag_high
#     query: "SELECT 1 FROM pg_stat_replication WHERE pg_wal_lsn_diff(sent_lsn, replay_lsn) > 104857600 OR replay_lag > INTERVAL '30 seconds'"
#
#   - name: standby_not_streaming
#     query: "SELECT CASE WHEN pg_is_in_recovery() THEN NULL ELSE 1 END"
#
#   - name: wal_replay_paused
#     query: "SELECT CASE WHEN pg_is_wal_replay_paused() THEN 1 ELSE NULL END"

# select:
#   - name: track_counts_status
#     query: "SELECT name, setting FROM pg_settings WHERE name = 'track_counts'"
#
#   - name: checkpoint_flooding_ratio
#     query: "SELECT checkpoints_timed, checkpoints_req, CASE WHEN (checkpoints_timed + checkpoints_req) > 0 THEN ROUND(checkpoints_req::decimal/(checkpoints_timed + checkpoints_req), 2) ELSE 0 END as req_ratio FROM pg_stat_bgwriter"
#
#   - name: ssl_configuration
#     query: "SELECT name, setting FROM pg_settings WHERE name = 'ssl'"
#
#   - name: password_encryption_method
#     query: "SELECT name, setting FROM pg_settings WHERE name = 'password_encryption'"
#
#   - name: connection_usage_stats
#     query: "SELECT COUNT(*) AS active_connections, (SELECT setting::int FROM pg_settings WHERE name = 'max_connections') AS max_connections FROM pg_stat_activity"
#
#   # TODO (YAGYANSH): Add back when replication is verifyable
#   - name: replication_lag_details
#     query: "SELECT application_name, state, sync_state, pg_wal_lsn_diff(sent_lsn, replay_lsn) AS bytes_lag, write_lag, flush_lag, replay_lag FROM pg_stat_replication"
#
#   - name: replication_slot_wal_accumulation
#     query: "SELECT slot_name, database, active, pg_size_pretty(pg_wal_lsn_diff(pg_current_wal_lsn(), restart_lsn)) AS wal_retained FROM pg_replication_slots"
#
#   - name: standby_recovery_status
#     query: "SELECT pg_is_in_recovery()"
#
#   - name: wal_replay_pause_status
#     query: "SELECT pg_is_wal_replay_paused()"
#
#   # TODO (YAGYANSH): Currently there is no trivial way to get disk size, this is not useful then.
#   - name: database_sizes
#     query: "SELECT d.datname, pg_size_pretty(pg_database_size(d.datname)) AS size FROM pg_database d"
#
#   - name: checkpoint_write_times
#     query: "SELECT write_time, sync_time FROM pg_stat_checkpointer"
#
#   - name: transaction_wraparound_details
#     query: "WITH max_age AS (SELECT 2000000000 AS max_old_xid, setting::int AS autovacuum_freeze_max_age FROM pg_settings WHERE name = 'autovacuum_freeze_max_age'), per_db AS (SELECT age(datfrozenxid) AS oldest_xid FROM pg_database WHERE datallowconn) SELECT MAX(oldest_xid) AS oldest_xid, ROUND(100.0 * MAX(oldest_xid) / (SELECT max_old_xid FROM max_age), 2) AS pct_wrap, ROUND(100.0 * MAX(oldest_xid) / (SELECT autovacuum_freeze_max_age FROM max_age), 2) AS pct_autovac FROM per_db"
#
#   - name: tables_without_primary_keys
#     query: "SELECT n.nspname, c.relname FROM pg_class c JOIN pg_namespace n ON n.oid = c.relnamespace LEFT JOIN pg_index i ON c.oid = i.indrelid AND i.indisprimary WHERE c.relkind = 'r' AND n.nspname NOT IN ('pg_catalog','information_schema') AND i.indexrelid IS NULL"
#
#   - name: superuser_roles
#     query: "SELECT rolname, rolsuper FROM pg_roles WHERE rolsuper = true"
#
#   - name: hba_file_rules
#     query: "SELECT * FROM pg_hba_file_rules"
#
#   - name: wal_archiver_status
#     query: "SELECT archived_count, failed_count, last_failed_time FROM pg_stat_archiver"
#
#   - name: installed_extensions
#     query: "SELECT extname FROM pg_extension ORDER BY extname"