apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "incerto-collector.fullname" . }}
  labels:
    {{- include "incerto-collector.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "incerto-collector.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "incerto-collector.selectorLabels" . | nindent 8 }}
    spec:

      {{- if .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      
      {{- if .Values.affinity }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      
      {{- if .Values.tolerations }}
      tolerations:
        {{- toYaml .Values.tolerations | nindent 8 }}
      {{- end }}

      initContainers:
        - name: init-register-host
          image: curlimages/curl:latest
          command: ["/bin/sh", "-c"]
          args:
            - |
              NODE_NAME=$NODE_NAME
              echo "Registering Node: $NODE_NAME"
              RESPONSE=$(curl -s -f -X POST \
                "{{ .Values.service.url }}/api/v1/register-partial-host" \
                -H "accept: application/json" \
                -H "Content-Type: application/json" \
                -d '{
                  "uniqueIdentifier": "'"$NODE_NAME"'",
                  "hostMetaData": {
                    "deployment": "KUBERNETES",
                    "podName": "'"$POD_NAME"'",
                    "podUID": "'"$POD_UID"'",
                    "podNamespace": "'"$POD_NAMESPACE"'",
                    "podIP": "'"$POD_IP"'",
                    "hostIP": "'"$HOST_IP"'",
                    "nodeName": "'"$NODE_NAME"'"
                  }
                }')
              
              if [ $? -ne 0 ]; then
                echo "ERROR: Failed to register node."
                exit 1
              fi
              
              HOST_ID=$(echo $RESPONSE | grep -o '"hostId":"[^"]*"' | cut -d'"' -f4)
              
              if [ -z "$HOST_ID" ]; then
                echo "ERROR: Failed to extract HOST_ID"
                exit 1
              fi
              
              echo $HOST_ID > /shared/.env
              echo "Node registered with HOST_ID: $HOST_ID"
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_UID
            valueFrom:
              fieldRef:
                fieldPath: metadata.uid
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: HOST_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          volumeMounts:
            - name: shared-volume
              mountPath: /shared

      containers:
        - name: incerto-collector
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args: 
            - |
              export HOST_ID=$(cat /shared/.env)
              echo "Starting collector with HOST_ID: $HOST_ID"
              exec /app/run-script.sh
          env:
          - name: SERVICE_URL
            value: "{{ .Values.service.url }}"
          - name: CLICKHOUSE_ENDPOINT
            value: "{{ .Values.clickhouse.endpoint }}"
          - name: CLICKHOUSE_USERNAME
            value: "{{ .Values.clickhouse.username }}"
          - name: CLICKHOUSE_PASSWORD
            value: "{{ .Values.clickhouse.password }}"
          volumeMounts:
            - name: shared-volume
              mountPath: /shared
          
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          
      volumes:
        - name: shared-volume
          emptyDir: {}