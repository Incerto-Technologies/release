receivers:
  incerto_clickhouse/1d:
    collection_interval: 24h
    endpoint: ${env:CLICKHOUSE_ENDPOINT}
    username: ${env:CLICKHOUSE_USERNAME}
    select:
      - name: bad_read_write_ratio
        query: "SELECT normalized_query_hash, any(query_id) as sample_query_id, any(user) as user, anyLast(event_time) as latest_execution_time, max(read_rows) as max_read_rows, argMax(result_rows, read_rows / result_rows) as result_rows_for_worst, max(round(read_rows / result_rows, 2)) AS worst_read_result_ratio, argMax(round(query_duration_ms / 1000, 2), read_rows / result_rows) as duration_seconds_for_worst, argMax(formatReadableSize(memory_usage), read_rows / result_rows) as memory_used_for_worst, argMax(query, read_rows / result_rows) as full_query_for_worst FROM system.query_log WHERE type = 'QueryFinish' AND query_kind = 'Select' AND event_time >= now() - INTERVAL 1 DAY AND result_rows > 0 AND read_rows > 0 AND read_rows / result_rows > 5 AND length(used_aggregate_functions) = 0 GROUP BY normalized_query_hash ORDER BY worst_read_result_ratio DESC LIMIT 1"
        includeQueryLog: false
  incerto_clickhouse/1h:
    collection_interval: 7200s
    endpoint: ${env:CLICKHOUSE_ENDPOINT}
    username: ${env:CLICKHOUSE_USERNAME}
    select:
      - name: useless_tables
        query: "SELECT `database`, `table`, p.mm AS last_modifidation_time FROM (SELECT max(modification_time) AS mm, `table`, database FROM system.parts GROUP BY database, `table` HAVING mm < '2025-01-01') AS p LEFT JOIN (SELECT DISTINCT arrayJoin(tables) AS full_table_name FROM system.query_log WHERE event_time > now() - INTERVAL 1 MONTH) AS q ON concat(p.database, '.', p.table) = q.full_table_name HAVING full_table_name = '' ORDER BY last_modifidation_time DESC settings log_queries=0,log_profile_events=0"
        includeQueryLog: false
      - name: no_ttl
        query: "select database, table from system.tables where not create_table_query ILIKE '%TTL%' and total_rows > 1000000 ORDER BY total_rows DESC settings log_queries=0,log_profile_events=0"
        includeQueryLog: false
  incerto_clickhouse/5m:
    collection_interval: 300s
    endpoint: ${env:CLICKHOUSE_ENDPOINT}
    username: ${env:CLICKHOUSE_USERNAME}
    select:
      - name: too_many_parts
        query: SELECT database, `table`, count(*) as DataCount FROM system.parts WHERE active = 1 AND database != 'system' GROUP BY database, `table`, active HAVING count(*) > (SELECT IF(toInt32OrZero(value) = 0, 3000, toInt32OrZero(value)) * 0.9 FROM system.merge_tree_settings WHERE name = 'parts_to_throw_insert') ORDER BY DataCount DESC, database ASC, `table` ASC settings log_queries=0,log_profile_events=0
        includeQueryLog: false

      - name: read_only_tables
        query: "select database, table, zookeeper_path, replica_name from system.replicas where is_readonly = 1 settings log_queries=0,log_profile_events=0"
        includeQueryLog: false

      - name: failed_mutation
        query: "SELECT `database`, `table`, mutation_id, command, create_time, parts_to_do, is_done, is_killed, latest_failed_part, latest_fail_time, latest_fail_reason FROM system.mutations WHERE is_done = 0 AND latest_failed_part != '' AND ((now() - latest_fail_time) < (INTERVAL 1 MINUTE)) settings log_queries=0,log_profile_events=0"
        includeQueryLog: false

      - name: query_high_execution_time
        query: "WITH (SELECT quantileExact(0.9999)(query_duration_ms) FROM system.query_log WHERE event_time > (now() - toIntervalDay(7))) AS q SELECT event_time, query_id, query, query_duration_ms FROM system.query_log WHERE (query_duration_ms > q) AND (event_time > (now() - toIntervalMinute(10))) ORDER BY query_duration_ms DESC settings log_queries=0,log_profile_events=0"
        includeQueryLog: false

    exists:
      - name: query_throuhput_not_max
        query: "select * from (select sum(multiIf(type = '1', 1, type = '2', -1, 0)) as value from system.query_log where event_time > now() - INTERVAL 1 MINUTE) where value > 4 settings log_queries=0,log_profile_events=0"
        includeQueryLog: false
      - name: unreachable_host
        query: "with (select uniqExact(host_name) from system.clusters where cluster != 'default') as val1, (select cluster from system.clusters WHERE cluster != 'default' LIMIT 1) as cluster_name, (select uniqExact(hostName()) from clusterAllReplicas(cluster_name) settings skip_unavailable_shards = 1) as val2 select * from (select val1 == val2 as allConnected) where allConnected = 0 settings log_queries=0,log_profile_events=0"
        includeQueryLog: false

  incerto_clickhouse/1m:
    collection_interval: 60s
    endpoint: ${env:CLICKHOUSE_ENDPOINT}
    username: ${env:CLICKHOUSE_USERNAME}
    exists:
      - name: s3_failure
        query: "select hostname from system.blob_storage_log where event_time > now () - INTERVAL 2 Minutes and error != '' limit 1"
        includeQueryLog: false

      - name: too_many_s3_requests
        # query: "select count() from system.blob_storage_log where disk_name='s3' and event_time > now() - interval 10 minute;"
        query: "select 1 where (select sum(CurrentMetric_S3Requests) from system.metric_log where event_time > now() - interval 10 minute) > 100;"
        includeQueryLog: false

      - name: multiple_zookeeper_sessions
        query: SELECT event_time, CurrentMetric_ZooKeeperSession FROM system.metric_log WHERE event_time > NOW() - INTERVAL 1 MINUTE AND CurrentMetric_ZooKeeperSession > 1 settings log_queries=0,log_profile_events=0
        includeQueryLog: false

      - name: high_keeper_latency
        query: WITH (SELECT quantileExact(0.95)(ProfileEvent_KeeperLatency) FROM system.metric_log where event_time > now() - INTERVAL 10 days) AS quantile SELECT event_time, ProfileEvent_KeeperLatency FROM system.metric_log WHERE event_time > now() - INTERVAL 1 MINUTE AND ProfileEvent_KeeperLatency > quantile settings log_queries=0,log_profile_events=0
        includeQueryLog: false
      #
      #      - name: high_keeper_storage_lock_wait
      #        query: WITH (SELECT quantileExact(0.95)(ProfileEvent_KeeperStorageLockWaitMicroseconds) FROM system.metric_log where event_time > now() - INTERVAL 3 MONTHS) AS quantile SELECT event_time, ProfileEvent_KeeperStorageLockWaitMicroseconds FROM system.metric_log WHERE event_time > now() - INTERVAL 1 MINUTE AND ProfileEvent_KeeperStorageLockWaitMicroseconds > quantile settings log_queries=0,log_profile_events=0
      #        includeQueryLog: false
      #
      #      - name: high_keeper_single_request_latency
      #        query: WITH (SELECT quantileExact(0.95)(ProfileEvent_KeeperTotalElapsedMicroseconds) FROM system.metric_log where event_time > now() - INTERVAL 3 MONTHS) AS quantile SELECT event_time, ProfileEvent_KeeperTotalElapsedMicroseconds FROM system.metric_log WHERE event_time > now() - INTERVAL 1 MINUTE AND ProfileEvent_KeeperTotalElapsedMicroseconds > quantile settings log_queries=0,log_profile_events=0
      #        includeQueryLog: false

      - name: zookeeper_user_exception
        query: WITH (SELECT ProfileEvent_ZooKeeperUserExceptions FROM system.metric_log WHERE event_time BETWEEN (now() - INTERVAL 2 MINUTE) AND (now() - INTERVAL 1 MINUTE) ORDER BY event_time LIMIT 1) as PreviousException SELECT event_time, ProfileEvent_ZooKeeperUserExceptions FROM system.metric_log WHERE event_time > now() - INTERVAL 1 MINUTE AND ProfileEvent_ZooKeeperUserExceptions > PreviousException settings log_queries=0,log_profile_events=0
        includeQueryLog: false

      - name: zookeeper_hardware_exception
        query: WITH (SELECT ProfileEvent_ZooKeeperHardwareExceptions FROM system.metric_log WHERE event_time BETWEEN (now() - INTERVAL 2 MINUTE) AND (now() - INTERVAL 1 MINUTE) ORDER BY event_time LIMIT 1) as PreviousException SELECT event_time, ProfileEvent_ZooKeeperHardwareExceptions FROM system.metric_log WHERE event_time > now() - INTERVAL 1 MINUTE AND ProfileEvent_ZooKeeperHardwareExceptions > PreviousException settings log_queries=0,log_profile_events=0
        includeQueryLog: false

      - name: zookeeper_other_exception
        query: WITH (SELECT ProfileEvent_ZooKeeperOtherExceptions FROM system.metric_log WHERE event_time BETWEEN (now() - INTERVAL 2 MINUTE) AND (now() - INTERVAL 1 MINUTE) ORDER BY event_time LIMIT 1) as PreviousException SELECT event_time, ProfileEvent_ZooKeeperOtherExceptions FROM system.metric_log WHERE event_time > now() - INTERVAL 1 MINUTE AND ProfileEvent_ZooKeeperOtherExceptions > PreviousException settings log_queries=0,log_profile_events=0
        includeQueryLog: false

      - name: zookeeper_commits_failed
        query: WITH (SELECT ProfileEvent_KeeperCommitsFailed FROM system.metric_log WHERE event_time BETWEEN (now() - INTERVAL 2 MINUTE) AND (now() - INTERVAL 1 MINUTE) ORDER BY event_time LIMIT 1) as PreviousException SELECT event_time, ProfileEvent_KeeperCommitsFailed FROM system.metric_log WHERE event_time > now() - INTERVAL 1 MINUTE AND ProfileEvent_KeeperCommitsFailed > PreviousException settings log_queries=0,log_profile_events=0
        includeQueryLog: false

      - name: zookeeper_metadata_cleanup_error
        query: WITH (SELECT ProfileEvent_MetadataFromKeeperBackgroundCleanupErrors FROM system.metric_log WHERE event_time BETWEEN (now() - INTERVAL 2 MINUTE) AND (now() - INTERVAL 1 MINUTE) ORDER BY event_time LIMIT 1) as PreviousException SELECT event_time, ProfileEvent_MetadataFromKeeperBackgroundCleanupErrors FROM system.metric_log WHERE event_time > now() - INTERVAL 1 MINUTE AND ProfileEvent_MetadataFromKeeperBackgroundCleanupErrors > PreviousException settings log_queries=0,log_profile_events=0
        includeQueryLog: false

      - name: keeper_outstanding_requests
        query: "select * from system.metrics where metric = 'KeeperOutstandingRequests' settings log_queries=0,log_profile_events=0"
        includeQueryLog: false
      - name: data_change_queries
        query: "SELECT query_id, query FROM system.query_log WHERE (event_time >= (now() - toIntervalMinute(10))) AND (type = 'QueryFinish') AND ((query ILIKE 'DROP%') OR (query ILIKE 'SYSTEM%') OR (query ILIKE 'ALTER%') OR (query ILIKE 'truncate%')) settings log_queries=0,log_profile_events=0"
        includeQueryLog: false
    select:
      - name: free_disk_below_20_percent
        query: "SELECT SUM(total_space) AS TotalSpace, SUM(free_space - keep_free_space) AS AvailableSpace, SUM(free_space - keep_free_space)/SUM(total_space) AS AvailablePercentage FROM system.disks HAVING AvailableSpace < (0.2 * TotalSpace) LIMIT 1 settings log_queries=0,log_profile_events=0"
        includeQueryLog: false

      - name: available_memory_below_90_percentile
        query: "SELECT (available.value / total.value) as available_percent FROM (SELECT value FROM system.asynchronous_metrics WHERE metric = 'OSMemoryTotal') AS total, (SELECT value FROM system.asynchronous_metrics WHERE metric = 'OSMemoryAvailable') AS available WHERE available_percent < 0.2 LIMIT 1 settings log_queries=0,log_profile_events=0"
        includeQueryLog: false

      - name: query_high_read_bytes
        query: "WITH (SELECT quantileExact(0.9999)(read_bytes) FROM system.query_log WHERE event_time > (now() - toIntervalDay(7))) AS q SELECT event_time    , query_id, query, read_bytes FROM system.query_log WHERE (read_bytes > q) AND (event_time > (now() - toIntervalMinute(10))) ORDER BY read_bytes DESC settings log_queries=0,log_profile_events=0"
        includeQueryLog: false

      - name: queries_running_10
        query: "SELECT value as running_processes FROM (SELECT count(*) AS value FROM system.processes) WHERE value > 10 ORDER BY value DESC settings log_queries=0,log_profile_events=0"
        includeQueryLog: false

      - name: qps_9999
        query: "with (select quantileExact(0.9999)(ProfileEvent_Query) from system.metric_log where event_time > now() -  INTERVAL 7 DAY) as q  select  event_time,  ProfileEvent_Query from system.metric_log where ProfileEvent_Query > q and event_time > now() - INTERVAL  1  MINUTE ORDER BY ProfileEvent_Query DESC settings log_queries=0,log_profile_events=0"
        includeQueryLog: false

      - name: running_queries_high
        query: "WITH (SELECT quantileExact(0.9999)(CurrentMetric_Query) FROM system.metric_log WHERE event_time > now() - INTERVAL 1 MONTH) AS q SELECT event_time, CurrentMetric_Query FROM system.metric_log WHERE CurrentMetric_Query > q AND event_time > now() - INTERVAL 1 MINUTE ORDER BY CurrentMetric_Query DESC settings log_queries=0,log_profile_events=0"
        includeQueryLog: false

      - name: query_time_high
        query: "WITH (SELECT quantileExact(0.9999)(ProfileEvent_QueryTimeMicroseconds) FROM system.metric_log WHERE event_time > now() - INTERVAL 1 MONTH) AS q SELECT event_time, ProfileEvent_QueryTimeMicroseconds/1000 as QueryTime FROM system.metric_log WHERE ProfileEvent_QueryTimeMicroseconds > q AND event_time > now() - INTERVAL 1 MINUTE ORDER BY QueryTime DESC settings log_queries=0,log_profile_events=0"
        includeQueryLog: false

      - name: os_wait_high
        query: "WITH (SELECT quantileExact(0.9999)(ProfileEvent_OSCPUWaitMicroseconds) FROM system.metric_log WHERE event_time > now() - INTERVAL 1 MONTH) AS q SELECT event_time, ProfileEvent_OSCPUWaitMicroseconds / 1000 AS OSCPUWaitMS FROM system.metric_log WHERE ProfileEvent_OSCPUWaitMicroseconds > q AND event_time > now() - INTERVAL 1 MINUTE ORDER BY OSCPUWaitMS DESC LIMIT 1 settings log_queries=0,log_profile_events=0"
        includeQueryLog: false

      - name: replication_issues
        query: "SELECT `database`, `table`, replica_name, type as task_type, position, required_quorum, is_detach, num_tries, last_exception, last_exception_time, last_attempt_time, merge_type FROM system.replication_queue WHERE last_exception_time > now() - INTERVAL 10 MINUTE SETTINGS log_queries=0,log_profile_events=0"
        includeQueryLog: false

      - name: error_in_parts
        query: "SELECT query_id, event_type, merge_algorithm, event_time, `database`, `table`, part_name, part_type, disk_name, `rows`, error, exception, errorCodeToName(error) AS error_code FROM system.part_log WHERE event_time >= (NOW() - (INTERVAL 1 MINUTE)) AND error > 0 and errorCodeToName(error) != 'INSERT_WAS_DEDUPLICATED' SETTINGS log_queries=0,log_profile_events=0"
        includeQueryLog: false
      - name: mle_value
        query: "SELECT event_time, ProfileEvent_QueryMemoryLimitExceeded FROM system.metric_log WHERE event_time > now() - INTERVAL 20 Minutes AND ProfileEvent_QueryMemoryLimitExceeded > 0 ORDER BY ProfileEvent_QueryMemoryLimitExceeded DESC SETTINGS log_queries=0,log_profile_events=0"
        includeQueryLog: false
      - name: replica_health
        query: "SELECT database, table, is_readonly, is_session_expired, future_parts > 20 future_parts_problem, parts_to_check > 10 check_problem, queue_size > 20 queue_problem, inserts_in_queue > 10 insert_query_problem, merges_in_queue, log_max_index - log_pointer > 10 as log_diff, total_replicas < 2 replica_problem, active_replicas < total_replicas non_active FROM system.replicas WHERE is_readonly OR is_session_expired OR future_parts > 20 OR parts_to_check > 10 OR queue_size > 20 OR inserts_in_queue > 10 OR log_max_index - log_pointer > 10 OR total_replicas < 2 OR active_replicas < total_replicas settings log_queries=0,log_profile_events=0"
        includeQueryLog: false
      - name: insert_exception
        query: "SELECT type, query_duration_ms, current_database, query, exception_code, exception, query_id, count() OVER() as total_count FROM system.query_log WHERE (type = '4') AND (query_kind = 'Insert') AND (event_time > (now() - toIntervalMinute(2))) settings log_queries=0,log_profile_events=0"
        includeQueryLog: false
      - name: query_log_errors
        query: "select type as event_type, event_time, written_rows, memory_usage, current_database, query, query_kind, exception_code, exception, stack_trace, query_id, databases, tables, count() OVER() as total_count from system.query_log where type > 3 and event_time > now() - INTERVAL 10 Minute SETTINGS log_queries=0,log_profile_events=0"
        includeQueryLog: false
      - name: mle_query
        query: "SELECT type as event_type, event_time, written_rows, memory_usage, current_database, query, query_kind, exception_code, exception, stack_trace, query_id, databases, tables, count() OVER() as total_count FROM system.query_log WHERE exception_code = 241 AND event_time > now() - INTERVAL 10 Minutes SETTINGS log_queries=0,log_profile_events=0"
        includeQueryLog: false

      - name: mle
        query: "select sum(ProfileEvent_QueryMemoryLimitExceeded) count_mle from system.metric_log where event_time > now() - INTERVAL 20 Minutes and ProfileEvent_QueryMemoryLimitExceeded > 0 settings log_queries=0,log_profile_events=0"
        includeQueryLog: false

      - name: query_running_since_minute
        query: "SELECT COUNT(*) as running_queries, max(query_id) as query_id FROM system.processes WHERE elapsed >= 60 HAVING running_queries > 0 settings log_queries=0,log_profile_events=0"
        includeQueryLog: false

      - name: clickhouse_worker_down_10_minutes
        query: "select uptime() < 600 wasDown settings log_queries=0,log_profile_events=0"
        includeQueryLog: false

      - name: count_keeper_connection
        query: SELECT count(*) as  zookeeper_connections FROM system.zookeeper_connection settings log_queries=0,log_profile_events=0
        includeQueryLog: false

      - name: duplicate_macros
        query: "with (select cluster from system.clusters WHERE cluster != 'default' LIMIT 1) as cluster_name SELECT data.Macro as Macro, arrayStringConcat(groupArray(HostName), ',') as Hosts FROM (SELECT hostName() as HostName, arrayStringConcat(groupArray(CONCAT(macro, ':', substitution)), ',') as Macro FROM clusterAllReplicas(cluster_name, 'system.macros') GROUP BY hostName()) as data GROUP BY data.Macro HAVING COUNT(*) > 1 settings log_queries=0,log_profile_events=0"
        includeQueryLog: false

  hostmetrics:
    root_path: /
    collection_interval: 300s
    scrapers:
      disk:
        metrics:
          system.disk.weighted_io_time:
            enabled: false
          system.disk.operations:
            enabled: false
      load:
        metrics:
          system.cpu.load_average.5m:
            enabled: true
          system.cpu.load_average.15m:
            enabled: false
          system.cpu.load_average.1m:
            enabled: false
      memory:
        metrics:
          system.memory.utilization:
            enabled: true
      cpu:
        metrics:
          system.cpu.utilization:
            enabled: true
          system.cpu.time:
            enabled: false
      filesystem:
        metrics:
          system.filesystem.inodes.usage:
            enabled: false
          system.filesystem.utilization:
            enabled: true
          system.filesystem.usage:
            enabled: true
#      load:
#        metrics:
#          system.cpu.load_average.15m:
#            enabled: true
#      memory:
#        metrics:
#          system.memory.utilization:
#            enabled: true
#      cpu:
#        metrics:
#          system.cpu.utilization:
#            enabled: true
#      filesystem:
#        metrics:
#          system.filesystem.utilization:
#            enabled: true
#          system.filesystem.usage:
#            enabled: true
#
exporters:
  otlphttp:
    endpoint: ${env:SERVICE_URL}/api/v1/alerts/generated-metrics/${env:HOST_ID}?domain=clickhouse
    metrics_endpoint: ${env:SERVICE_URL}/api/v1/alerts/generated-metrics/${env:HOST_ID}?domain=clickhouse
    encoding: json
    compression: none

  debug:
    verbosity: detailed

service:
  pipelines:
    metrics:
      receivers:
        [
          hostmetrics,
          incerto_clickhouse/1m,
          incerto_clickhouse/5m,
          incerto_clickhouse/1h,
          incerto_clickhouse/1d,
        ]
      exporters: [debug, otlphttp]
