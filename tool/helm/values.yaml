# Kubernetes namespace for the deployment
# Set to specific namespace name or leave as null to use default namespace
# e.g. namespace: "incerto"
namespace: null

# Global configuration
global:
  environment: prod                 # dev or prod
  domain: ""                        # Set your domain here (e.g., test.incerto.in)

# AWS ECR Configuration for private image pulling
aws:
  region: "ap-south-1"
  accessKeyId: null                 # Your AWS Access Key ID
  secretAccessKey: null             # Your AWS Secret Access Key

# Image Pull Secret configuration
imagePullSecret:
  name: "ecr-secret"

# Image configuration
image:
  nginx:
    repository: nginx
    tag: "1.25-alpine"
    pullPolicy: IfNotPresent
  frontend:
    repository: "434499855633.dkr.ecr.ap-south-1.amazonaws.com/incerto/frontend"
    tag: "prod"  # Will be overridden based on environment
    pullPolicy: Always
  backend:
    repository: "434499855633.dkr.ecr.ap-south-1.amazonaws.com/incerto/backend"
    tag: "prod"  # Will be overridden based on environment
    pullPolicy: Always
  ai:
    repository: "434499855633.dkr.ecr.ap-south-1.amazonaws.com/incerto/ai"
    tag: "prod"  # Will be overridden based on environment
    pullPolicy: Always

# Service configuration
service:
  enabled: true
  type: ClusterIP
  ports:
    http: 80
    https: 443

# Resource allocation and limits for the container
resource:
  frontend:
    memory: "1024Mi"
  backend:
    memory: "2048Mi"
  ai:
    memory: "2048Mi"
  nginx:
    memory: "512Mi"

# Persistence configuration
persistence:
  enabled: true
  storageClass: ""                  # Use default storage class
  
  # Backend volumes
  backend:
    logs:
      size: 5Gi
    resourceScripts:
      size: 5Gi
    resourcePem:
      size: 5Gi
    resourceSource:
      size: 5Gi
    configRbac:
      size: 5Gi
  
  # AI volumes
  ai:
    logs:
      size: 5Gi

# SSL Configuration for Nginx
ssl:
  enabled: true
  certificate: null                   # base64 encoded certificate (required when enabled)
  privateKey: null                    # base64 encoded private key (required when enabled)

# Frontend configuration (config.json content)
frontend:
  config:
    CLICKHOUSE_ACCESS: true,
    POSTGRES_ACCESS: true,
    AI_WS_URL: "wss://{{ .Values.global.domain }}/websocket_ai/" 

# Backend configuration (.env content)
backend:
  env:
    ENVIRONMENT: "prod"
    ALLOWED_CORS_ORIGINS: "https://{{ .Values.global.domain }}"
    AWS_REGION: ""                  # only valid for AWS setups to pull ec2 list
    AWS_ACCESS_KEY_ID: ""           # only valid for AWS setups to pull ec2 list
    AWS_SECRET_ACCESS_KEY: ""       # only valid for AWS setups to pull ec2 list
    AI_AGENT_URL: "http://127.0.0.1:9797"
    SLACK_TOKEN: null
    SLACK_CHANNEL_ID: null
    FRONTEND_URL: "https://{{ .Values.global.domain }}"

# AI service configuration (.env content)
ai:
  env:
    SERVICE_NAME: "incerto-ai"
    ANTHROPIC_API_KEY: null
    OPENAI_API_KEY: null