apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "incerto-tool.fullname" . }}
  namespace: {{ required "A valid .Values.namespace entry required!" .Values.namespace }}
  labels:
    {{- include "incerto-tool.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "incerto-tool.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "incerto-tool.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.imagePullSecret.name }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecret.name }}
      {{- end }}
      initContainers:
      - name: populate-volumes
        image: {{ .Values.image.backend.repository }}:{{ include "incerto-tool.imageTag" . }}
        imagePullPolicy: {{ .Values.image.backend.pullPolicy }}
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Checking volume initialization status..."
            
            # RBAC: Initialize ONLY if never initialized before
            if [ ! -f "/mnt/rbac/.initialized" ]; then
              echo "FIRST RUN: Initializing config/rbac from container image..."
              mkdir -p /mnt/rbac
              cp -r /app/src/config/rbac/* /mnt/rbac/ 2>/dev/null || echo "No rbac files in image"
              touch /mnt/rbac/.initialized
              echo "✓ RBAC initialized from image"
            else
              echo "✓ RBAC already initialized - preserving ALL user changes"
            fi
            
            # Scripts: Initialize ONLY if never initialized before
            if [ ! -f "/mnt/scripts/.initialized" ]; then
              echo "FIRST RUN: Initializing resource/scripts from container image..."
              mkdir -p /mnt/scripts
              cp -r /app/src/resource/scripts/all/* /mnt/scripts/ 2>/dev/null || echo "No scripts in image"
              touch /mnt/scripts/.initialized
              echo "✓ Scripts initialized from image"
            else
              echo "✓ Scripts already initialized - preserving ALL user changes"
            fi
            
            # PEM: Initialize ONLY if never initialized before
            if [ ! -f "/mnt/pem/.initialized" ]; then
              echo "FIRST RUN: Initializing resource/pem from container image..."
              mkdir -p /mnt/pem
              cp -r /app/src/resource/pem/* /mnt/pem/ 2>/dev/null || echo "No pem files in image"
              touch /mnt/pem/.initialized
              echo "✓ PEM initialized from image"
            else
              echo "✓ PEM already initialized - preserving ALL user changes"
            fi
            
            # Source: Initialize ONLY if never initialized before
            if [ ! -f "/mnt/source/.initialized" ]; then
              echo "FIRST RUN: Initializing resource/source from container image..."
              mkdir -p /mnt/source
              cp -r /app/src/resource/source/* /mnt/source/ 2>/dev/null || echo "No source files in image"
              touch /mnt/source/.initialized
              echo "✓ Source initialized from image"
            else
              echo "✓ Source already initialized - preserving ALL user changes"
            fi
            
            echo "=== VOLUME STATUS ==="
            echo "All volumes respect user changes - files added, modified, or deleted by users are preserved forever"
        volumeMounts:
        - name: backend-rbac
          mountPath: /mnt/rbac
        - name: backend-scripts
          mountPath: /mnt/scripts
        - name: backend-pem
          mountPath: /mnt/pem
        - name: backend-source
          mountPath: /mnt/source
      containers:
      # Nginx Container
      - name: nginx
        image: {{ .Values.image.nginx.repository }}:{{ .Values.image.nginx.tag }}
        imagePullPolicy: {{ .Values.image.nginx.pullPolicy }}
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        resources:
          requests:
            memory: {{ .Values.resource.nginx.memory }}
            cpu: {{ .Values.resource.nginx.cpu }}
          limits:
            memory: {{ .Values.resource.nginx.memory }}
            cpu: {{ .Values.resource.nginx.cpu }}
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/incerto.conf
          subPath: incerto.conf
        {{- if .Values.ssl.enabled }}
        - name: ssl-certs
          mountPath: /etc/ssl/certs/tls.crt
          subPath: tls.crt
        - name: ssl-certs
          mountPath: /etc/ssl/private/tls.key
          subPath: tls.key
        {{- end }}
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5

      # Frontend Container
      - name: frontend
        image: {{ .Values.image.frontend.repository }}:{{ include "incerto-tool.imageTag" . }}
        imagePullPolicy: {{ .Values.image.frontend.pullPolicy }}
        ports:
        - containerPort: 3000
          name: frontend
        volumeMounts:
        - name: frontend-config
          mountPath: /app/dist/config.json
          subPath: config.json
        resources:
          requests:
            memory: "{{ .Values.resource.frontend.memory }}"
          limits:
            memory: "{{ .Values.resource.frontend.memory }}"
        livenessProbe:
          httpGet:
            path: /
            port: frontend
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: frontend
          initialDelaySeconds: 30
          periodSeconds: 10

      # Backend Container
      - name: backend
        image: {{ .Values.image.backend.repository }}:{{ include "incerto-tool.imageTag" . }}
        imagePullPolicy: {{ .Values.image.backend.pullPolicy }}
        ports:
        - containerPort: 8080
          name: backend
        volumeMounts:
        - name: backend-env
          mountPath: /app/src/.env
          subPath: .env
        {{- if .Values.persistence.enabled }}
        - name: backend-logs
          mountPath: /app/src/logs
        - name: backend-scripts
          mountPath: /app/src/resource/scripts/all
        - name: backend-pem
          mountPath: /app/src/resource/pem
        - name: backend-source
          mountPath: /app/src/resource/source
        - name: backend-rbac
          mountPath: /app/src/config/rbac
        {{- end }}
        resources:
          requests:
            memory: "{{ .Values.resource.backend.memory }}"
          limits:
            memory: "{{ .Values.resource.backend.memory }}"
        livenessProbe:
          httpGet:
            path: /api/health
            port: backend
          initialDelaySeconds: 120
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: backend
          initialDelaySeconds: 60
          periodSeconds: 10

      # AI Container
      - name: ai
        image: {{ .Values.image.ai.repository }}:{{ include "incerto-tool.imageTag" . }}
        imagePullPolicy: {{ .Values.image.ai.pullPolicy }}
        ports:
        - containerPort: 8000
          name: ai-ws
        - containerPort: 9797
          name: ai
        env:
        {{- if .Values.ai.env.ANTHROPIC_API_KEY }}
        - name: ANTHROPIC_API_KEY
          value: "{{ .Values.ai.env.ANTHROPIC_API_KEY }}"
        {{- end }}
        {{- if .Values.ai.env.OPENAI_API_KEY }}
        - name: OPENAI_API_KEY
          value: "{{ .Values.ai.env.OPENAI_API_KEY }}"
        {{- end }}
        volumeMounts:
        {{- if .Values.persistence.enabled }}
        - name: ai-logs
          mountPath: /app/logs
        {{- end }}
        resources:
          requests:
            memory: "{{ .Values.resource.ai.memory }}"
          limits:
            memory: "{{ .Values.resource.ai.memory }}"
        livenessProbe:
          httpGet:
            path: /
            port: ai
          initialDelaySeconds: 120
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: ai
          initialDelaySeconds: 60
          periodSeconds: 10

      volumes:
      - name: nginx-config
        configMap:
          name: {{ include "incerto-tool.fullname" . }}-nginx-config
      - name: frontend-config
        configMap:
          name: {{ include "incerto-tool.fullname" . }}-frontend-config
      - name: backend-env
        configMap:
          name: {{ include "incerto-tool.fullname" . }}-backend-env
      - name: ai-env
        configMap:
          name: {{ include "incerto-tool.fullname" . }}-ai-env
      
      {{- if .Values.persistence.enabled }}
      - name: backend-scripts
        persistentVolumeClaim:
          claimName: {{ include "incerto-tool.fullname" . }}-backend-scripts
      - name: backend-pem
        persistentVolumeClaim:
          claimName: {{ include "incerto-tool.fullname" . }}-backend-pem
      - name: backend-source
        persistentVolumeClaim:
          claimName: {{ include "incerto-tool.fullname" . }}-backend-source
      - name: backend-rbac
        persistentVolumeClaim:
          claimName: {{ include "incerto-tool.fullname" . }}-backend-rbac
      - name: backend-logs
        persistentVolumeClaim:
          claimName: {{ include "incerto-tool.fullname" . }}-backend-logs
      - name: ai-logs
        persistentVolumeClaim:
          claimName: {{ include "incerto-tool.fullname" . }}-ai-logs
      {{- end }}

      {{- if .Values.ssl.enabled }}
      - name: ssl-certs
        secret:
          secretName: {{ include "incerto-tool.fullname" . }}-ssl
      {{- end }}
      