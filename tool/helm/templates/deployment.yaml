apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "incerto-tool.fullname" . }}
  namespace: {{ required "A valid .Values.namespace entry required!" .Values.namespace }}
  labels:
    {{- include "incerto-tool.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "incerto-tool.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "incerto-tool.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.imagePullSecret.name }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecret.name }}
      {{- end }}
      initContainers:
      - name: setup-volumes
        image: {{ .Values.image.backend.repository }}:{{ include "incerto-tool.imageTag" . }}
        imagePullPolicy: {{ .Values.image.backend.pullPolicy }}
        command: ["/bin/sh", "-c"]
        env:
        - name: IMAGE_TAG
          value: "{{ include "incerto-tool.imageTag" . }}"
        args:
          - |
            echo "Starting advanced volume synchronization..."
            echo "Image tag: $IMAGE_TAG"
            
            # Create base directory structure
            mkdir -p /persistent/rbac
            mkdir -p /persistent/scripts  
            mkdir -p /persistent/pem
            mkdir -p /persistent/source
            mkdir -p /persistent/logs/backend
            
            # Get current image version/tag and content checksum
            IMAGE_VERSION="${IMAGE_TAG:-unknown}"
            IMAGE_CHECKSUM=$(find /app/src/config /app/src/resource -type f -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d' ' -f1)
            
            echo "Image version: $IMAGE_VERSION"
            echo "Image content checksum: $IMAGE_CHECKSUM"
            
            # Function to perform smart sync with conflict detection
            smart_sync() {
              local src_dir="$1"
              local dest_dir="$2" 
              local name="$3"
              
              echo "=== Smart syncing $name ==="
              
              if [ ! -d "$src_dir" ]; then
                echo "Source $src_dir not found, skipping"
                return
              fi
              
              mkdir -p "$dest_dir"
              
              # Check if this is first deployment
              if [ ! -f "$dest_dir/.sync_info" ]; then
                echo "First deployment: copying all files"
                cp -r "$src_dir"/* "$dest_dir/" 2>/dev/null || true
                echo "version=$IMAGE_VERSION" > "$dest_dir/.sync_info"
                echo "checksum=$IMAGE_CHECKSUM" >> "$dest_dir/.sync_info"
                echo "first_sync=$(date -Iseconds)" >> "$dest_dir/.sync_info"
                echo "=== $name first sync completed ==="
                return
              fi
              
              # Read previous sync info
              prev_version=$(grep "^version=" "$dest_dir/.sync_info" 2>/dev/null | cut -d'=' -f2)
              prev_checksum=$(grep "^checksum=" "$dest_dir/.sync_info" 2>/dev/null | cut -d'=' -f2)
              
              echo "Previous version: $prev_version"
              echo "Previous checksum: $prev_checksum"
              
              # If same version/checksum, skip
              if [ "$IMAGE_CHECKSUM" = "$prev_checksum" ]; then
                echo "No changes in image files, skipping sync"
                echo "=== $name sync skipped (no changes) ==="
                return
              fi
              
              echo "Image content changed, performing smart sync..."
              
              # Create backup directory for user files (if needed)
              backup_dir="$dest_dir/.backup_$(date +%s)"
              need_backup=false
              
              # Find files that exist in destination but not in source (user-created files)
              find "$dest_dir" -type f ! -path "$dest_dir/.*" 2>/dev/null | while read dest_file; do
                rel_path="${dest_file#$dest_dir/}"
                src_file="$src_dir/$rel_path"
                
                if [ ! -f "$src_file" ]; then
                  if [ "$need_backup" = "false" ]; then
                    mkdir -p "$backup_dir"
                    need_backup=true
                  fi
                  echo "  Backing up user-created file: $rel_path"
                  mkdir -p "$(dirname "$backup_dir/$rel_path")"
                  cp "$dest_file" "$backup_dir/$rel_path"
                fi
              done
              
              # Copy new/updated files from source, preserving user modifications
              conflicts_found=false
              find "$src_dir" -type f 2>/dev/null | while read src_file; do
                rel_path="${src_file#$src_dir/}"
                dest_file="$dest_dir/$rel_path"
                
                if [ ! -f "$dest_file" ]; then
                  echo "  Adding new file: $rel_path"
                  mkdir -p "$(dirname "$dest_file")"
                  cp "$src_file" "$dest_file"
                else
                  # File exists, check if user modified it
                  if cmp -s "$src_file" "$dest_file"; then
                    echo "  File unchanged: $rel_path"
                  else
                    # File was modified, create .new version and log conflict
                    echo "  CONFLICT: $rel_path (user modified, creating .new version)"
                    cp "$src_file" "$dest_file.new"
                    echo "$(date -Iseconds) CONFLICT: $rel_path - user version kept, new version saved as $rel_path.new" >> "$dest_dir/.conflicts.log"
                    conflicts_found=true
                  fi
                fi
              done
              
              # Update sync info
              echo "version=$IMAGE_VERSION" > "$dest_dir/.sync_info"
              echo "checksum=$IMAGE_CHECKSUM" >> "$dest_dir/.sync_info"
              echo "last_sync=$(date -Iseconds)" >> "$dest_dir/.sync_info"
              echo "previous_version=$prev_version" >> "$dest_dir/.sync_info"
              
              echo "=== $name sync completed ==="
            }
            
            # Perform smart sync for all directories
            smart_sync "/app/src/config/rbac" "/persistent/rbac" "RBAC"
            smart_sync "/app/src/resource/scripts/all" "/persistent/scripts" "Scripts"
            smart_sync "/app/src/resource/pem" "/persistent/pem" "PEM"  
            smart_sync "/app/src/resource/source" "/persistent/source" "Source"
            
            echo ""
            echo "üéØ All synchronization completed!"
            
            # Show conflicts summary if any
            if find /persistent -name ".conflicts.log" -size +0c 2>/dev/null | grep -q .; then
              echo ""
              echo "‚ö†Ô∏è  CONFLICTS DETECTED:"
              find /persistent -name ".conflicts.log" -exec cat {} \;
              echo ""
              echo "üí° Check .new files and resolve conflicts manually"
              echo "   Example: compare rbac/model.conf with rbac/model.conf.new"
            else
              echo "‚úÖ No conflicts detected"
            fi
            
            echo ""
            echo "üìä Sync Summary:"
            for dir in rbac scripts pem source; do
              if [ -f "/persistent/$dir/.sync_info" ]; then
                version=$(grep "^version=" "/persistent/$dir/.sync_info" | cut -d'=' -f2)
                last_sync=$(grep "^last_sync=" "/persistent/$dir/.sync_info" | cut -d'=' -f2)
                echo "  $dir: version $version (synced: $last_sync)"
              fi
            done
        volumeMounts:
        {{- if .Values.persistence.enabled }}
        - name: backend-data
          mountPath: /persistent
        {{- end }}
        
      containers:
      # Nginx Container
      - name: nginx
        image: {{ .Values.image.nginx.repository }}:{{ .Values.image.nginx.tag }}
        imagePullPolicy: {{ .Values.image.nginx.pullPolicy }}
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        resources:
          requests:
            memory: {{ .Values.resource.nginx.memory }}
            cpu: {{ .Values.resource.nginx.cpu }}
          limits:
            memory: {{ .Values.resource.nginx.memory }}
            cpu: {{ .Values.resource.nginx.cpu }}
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/incerto.conf
          subPath: incerto.conf
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5

      # Frontend Container
      - name: frontend
        image: {{ .Values.image.frontend.repository }}:{{ include "incerto-tool.imageTag" . }}
        imagePullPolicy: {{ .Values.image.frontend.pullPolicy }}
        ports:
        - containerPort: 3000
          name: frontend
        volumeMounts:
        - name: frontend-config
          mountPath: /app/dist/config.json
          subPath: config.json
        resources:
          requests:
            memory: "{{ .Values.resource.frontend.memory }}"
          limits:
            memory: "{{ .Values.resource.frontend.memory }}"
        livenessProbe:
          httpGet:
            path: /
            port: frontend
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: frontend
          initialDelaySeconds: 30
          periodSeconds: 10

      # Backend Container
      - name: backend
        image: {{ .Values.image.backend.repository }}:{{ include "incerto-tool.imageTag" . }}
        imagePullPolicy: {{ .Values.image.backend.pullPolicy }}
        command: ["/bin/sh", "-c"]
        args:
          - |
            echo "Setting up backend runtime environment..."
            
            # Create symlinks from application directories to persistent storage
            rm -rf /app/src/config/rbac
            rm -rf /app/src/resource/scripts/all
            rm -rf /app/src/resource/pem  
            rm -rf /app/src/resource/source
            rm -rf /app/src/logs
            
            ln -sf /persistent/rbac /app/src/config/rbac
            ln -sf /persistent/scripts /app/src/resource/scripts/all
            ln -sf /persistent/pem /app/src/resource/pem
            ln -sf /persistent/source /app/src/resource/source
            ln -sf /persistent/logs/backend /app/src/logs
            
            echo "Symlinks created, starting backend..."
            exec /app/src/backend.bin
        ports:
        - containerPort: 8080
          name: backend
        volumeMounts:
        - name: backend-env
          mountPath: /app/src/.env
          subPath: .env
        {{- if .Values.persistence.enabled }}
        - name: backend-data
          mountPath: /persistent
        {{- end }}
        resources:
          requests:
            memory: "{{ .Values.resource.backend.memory }}"
          limits:
            memory: "{{ .Values.resource.backend.memory }}"
        livenessProbe:
          httpGet:
            path: /api/health
            port: backend
          initialDelaySeconds: 120
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: backend
          initialDelaySeconds: 60
          periodSeconds: 10

      # AI Container
      - name: ai
        image: {{ .Values.image.ai.repository }}:{{ include "incerto-tool.imageTag" . }}
        imagePullPolicy: {{ .Values.image.ai.pullPolicy }}
        ports:
        - containerPort: 8000
          name: ai-ws
        - containerPort: 9797
          name: ai
        env:
        {{- if .Values.ai.env.ANTHROPIC_API_KEY }}
        - name: ANTHROPIC_API_KEY
          value: "{{ .Values.ai.env.ANTHROPIC_API_KEY }}"
        {{- end }}
        {{- if .Values.ai.env.OPENAI_API_KEY }}
        - name: OPENAI_API_KEY
          value: "{{ .Values.ai.env.OPENAI_API_KEY }}"
        {{- end }}
        resources:
          requests:
            memory: "{{ .Values.resource.ai.memory }}"
          limits:
            memory: "{{ .Values.resource.ai.memory }}"
        livenessProbe:
          httpGet:
            path: /
            port: ai
          initialDelaySeconds: 120
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: ai
          initialDelaySeconds: 60
          periodSeconds: 10

      volumes:
      # .env or config.yaml or config.json
      - name: nginx-config
        configMap:
          name: {{ include "incerto-tool.fullname" . }}-nginx-config
      - name: frontend-config
        configMap:
          name: {{ include "incerto-tool.fullname" . }}-frontend-config
      - name: backend-env
        configMap:
          name: {{ include "incerto-tool.fullname" . }}-backend-env
      - name: ai-env
        configMap:
          name: {{ include "incerto-tool.fullname" . }}-ai-env
      # volume for persistent data
      {{- if .Values.persistence.enabled }}
      - name: backend-data
        persistentVolumeClaim:
          claimName: {{ include "incerto-tool.fullname" . }}-backend-data
      {{- end }}